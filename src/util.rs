/// Traits and utilities for internal usage

///////////////////////////////////////////////////////////////////////////////
/// IsEmpty
///////////////////////////////////////////////////////////////////////////////

// TODO: Reuse from https://github.com/Stebalien/tool-rs?
pub(crate) trait IsEmpty {
    fn is_empty(&self) -> bool;
}

/// Trivial implementation of `IsEmpty` for the unit type `()`
impl IsEmpty for () {
    fn is_empty(&self) -> bool {
        true
    }
}

/// Trivial implementation of `IsEmpty` for quantities
impl IsEmpty for usize {
    fn is_empty(&self) -> bool {
        *self == 0
    }
}

///////////////////////////////////////////////////////////////////////////////
/// Mergeable
///////////////////////////////////////////////////////////////////////////////

/// A monoid for collecting or accumulating items
pub(crate) trait Mergeable {
    type Item;

    /// Create an empty instance
    ///
    /// The optional `capacity_hint` parameter provides a best guess about
    /// the initial or expected capacity.
    fn empty<H>(capacity_hint: H) -> Self
    where
        H: Into<Option<usize>>;

    /// Consuming combine operation that merges this with another instance
    fn merge(self, other: Self) -> Self;

    /// Consuming combine operation that merges this instance with the
    /// items generated by an iterator
    ///
    /// The `reserve_hint` parameter provides a preliminary guess how
    /// many items the iterator is supposed to generate.
    fn merge_from_iter<H, I>(self, reserve_hint: H, from_iter: I) -> Self
    where
        H: Into<Option<usize>>,
        I: Iterator<Item = Self::Item>;
}

/// Trivial implementation of `Mergeable` for the unit type `()`
impl Mergeable for () {
    type Item = ();

    fn empty<H>(_: H) -> Self {}

    fn merge(self, _: Self) -> Self {}

    fn merge_from_iter<I, H>(self, _: I, _: H) -> Self {}
}

/// Trivial implementation of `Mergeable` for quantities
impl Mergeable for usize {
    type Item = usize;

    fn empty<H>(_: H) -> Self {
        0
    }

    fn merge(self, other: Self) -> Self {
        self + other
    }

    fn merge_from_iter<H, I>(self, _: H, from_iter: I) -> Self
    where
        I: Iterator<Item = Self::Item>,
    {
        from_iter.fold(self, |sum, item| sum + item)
    }
}

///////////////////////////////////////////////////////////////////////////////
/// UnitResult
///////////////////////////////////////////////////////////////////////////////

/// A result with only an error and the unit type `()` on success
pub(crate) type UnitResult<E> = core::result::Result<(), E>;

impl<E> Mergeable for UnitResult<E>
where
    E: Mergeable + IsEmpty,
{
    type Item = E::Item;

    fn empty<H>(_: H) -> Self {
        Ok(())
    }

    fn merge(self, other: Self) -> Self {
        match (self, other) {
            (Ok(()), Ok(())) => Ok(()),
            (Ok(()), Err(err)) => Err(err),
            (Err(err), Ok(())) => Err(err),
            (Err(e1), Err(e2)) => Err(e1.merge(e2)),
        }
    }

    fn merge_from_iter<H, I>(self, reserve_hint: H, from_iter: I) -> Self
    where
        H: Into<Option<usize>>,
        I: Iterator<Item = Self::Item>,
    {
        let reserve_hint = reserve_hint.into();
        match self {
            Ok(()) => Self::empty(reserve_hint).merge_from_iter(reserve_hint, from_iter),
            Err(e) => Err(e.merge_from_iter(reserve_hint, from_iter)),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn unit_is_empty() {
        assert!(().is_empty())
    }

    #[test]
    fn unit_mergeable() {
        assert_eq!((), <() as Mergeable>::empty(5));
        assert_eq!((), ().merge(()));
        assert_eq!((), ().merge_from_iter(3, core::iter::repeat(()).take(3)));
    }

    #[test]
    fn unit_result_quantities() {
        assert_eq!(Ok(()) as UnitResult<usize>, Ok(()).merge(Ok(())));
        assert_eq!(Err(1usize), Err(1).merge(Ok(())));
        assert_eq!(Err(2usize), Ok(()).merge(Err(2)));
        assert_eq!(Err(3usize), Err(1).merge(Err(2)));
    }
}
